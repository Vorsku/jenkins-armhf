FROM ubuntu:18.04

ARG user=jenkins
ARG group=jenkins
ARG uid=1000
ARG gid=100
ARG http_port=8080
ARG agent_port=50000
ARG JENKINS_HOME=/var/jenkins_home

# install docker cli and openjdk
RUN apt-get update && apt-get install -y --no-install-recommends \
    apt-transport-https \
    ca-certificates \
    curl \
    gnupg-agent \
    openjdk-8-jre-headless \
    software-properties-common \
    && apt-get clean
RUN curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
RUN add-apt-repository "deb [arch=armhf] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
RUN apt-get update && apt-get install -y --no-install-recommends docker-ce-cli && apt-get clean

ENV JENKINS_HOME $JENKINS_HOME

# Jenkins is run with user `jenkins`, uid = 1000
# If you bind mount a volume from the host or a data container,
# ensure you use the same uid
RUN mkdir -p $JENKINS_HOME \
  && chown ${uid}:${gid} $JENKINS_HOME \
 # && groupadd -g ${gid} ${group} \
  && useradd -d "$JENKINS_HOME" -u ${uid} -g ${gid} -m -s /bin/bash ${user} \
#  && groupadd -g 995 docker \
#  && usermod -aG docker ${user} \
  && chown -R ${uid}:${gid} /var/run/docker.sock

# Jenkins home directory is a volume, so configuration and build history
# can be persisted and survive image upgrades
VOLUME $JENKINS_HOME

# `/usr/share/jenkins/ref/` contains all reference configuration we want
# to set on a fresh new installation. Use it to bundle additional plugins
# or config file with your custom jenkins Docker image.
RUN mkdir -p /usr/share/jenkins/ref/init.groovy.d

# Use tini as subreaper in Docker container to adopt zombie processes
COPY docker/tini	/sbin/tini

# jenkins version being bundled in this docker image
ARG JENKINS_VERSION

ENV JENKINS_VERSION ${JENKINS_VERSION:-2.164.1}
ENV JENKINS_UC https://updates.jenkins.io
ENV JENKINS_UC_EXPERIMENTAL=https://updates.jenkins.io/experimental
ENV JENKINS_INCREMENTALS_REPO_MIRROR=https://repo.jenkins-ci.org/incrementals
RUN chown -R ${user} "$JENKINS_HOME" /usr/share/jenkins/ref
ENV COPY_REFERENCE_FILE_LOG $JENKINS_HOME/copy_reference_file.log

USER ${user}

COPY docker/jenkins.war /usr/share/jenkins/jenkins.war
COPY docker/jenkins-support /usr/local/bin/jenkins-support
COPY docker/jenkins.sh /usr/local/bin/jenkins.sh
COPY docker/tini-shim.sh /bin/tini
ENTRYPOINT ["/sbin/tini", "--", "/usr/local/bin/jenkins.sh"]

# from a derived Dockerfile, can use `RUN plugins.sh active.txt` to setup /usr/share/jenkins/ref/plugins from a support bundle
COPY docker/plugins.sh /usr/local/bin/plugins.sh
COPY docker/install-plugins.sh /usr/local/bin/install-plugins.sh

# for main web interface:
EXPOSE ${http_port}

# will be used by attached slave agents:
EXPOSE ${agent_port}
